
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/04_fastpm_pm4py.ipynb

from exp.datasets import *

from pm4py.objects.log.importer.xes import factory as xes_import_factory
from pm4py.algo.discovery.simple.model.log import factory as simple_algorithm
from pm4py.algo.discovery.alpha import factory as alpha_miner
from pm4py.visualization.petrinet import factory as vis_petri
from pm4py.algo.discovery.heuristics import factory as heuristics_miner
from pm4py.visualization.heuristics_net import factory as vis_heu
from pm4py.algo.discovery.inductive import factory as inductive_miner
from pm4py.algo.discovery.dfg import factory as dfg_factory
from pm4py.visualization.dfg import factory as dfg_vis_factory


def import_xes(path_or_str):
    log = xes_import_factory.apply(str(path_or_str))
    return log

def run_alpha_miner(log):
    net, initial_marking, final_marking = alpha_miner.apply(log)
    #gviz = vis_petri.apply(net, initial_marking, final_marking)
    #vis_petri.view(gviz)
    return net, initial_marking, final_marking
def run_simple_miner(log,classic_output=True,parameters={"max_no_variants": 20}):
    net, initial_marking, final_marking = simple_algorithm.apply(log, classic_output=classic_output, parameters=parameters)
    #gviz = vis_petri.apply(net, initial_marking, final_marking)
    #vis_petri.view(gviz)
    return net, initial_marking, final_marking
def run_heuristic_net(log,parameters={"dependency_thresh": 0.99}):
    heu_net = heuristics_miner.apply_heu(log, parameters)
    #gviz = vis_heu.apply(heu_net)
    #vis_heu.view(gviz)
    return heu_net
def run_heuristic_miner(log,parameters={"dependency_thresh": 0.99}):
    net, initial_marking, final_marking = heuristics_miner.apply(log, parameters)
    #gviz = vis_petri.apply(net, initial_marking, final_marking)
    #vis_petri.view(gviz)
    return net, initial_marking, final_marking
def run_inductive_miner(log,parameters={}):
    net, initial_marking, final_marking = inductive_miner.apply(log,parameters=parameters)
    #gviz = vis_petri.apply(net, initial_marking, final_marking)
    #vis_petri.view(gviz)
    return net, initial_marking, final_marking
def run_dfg_miner(log,variant="frequency"):
    dfg = dfg_factory.apply(log)
    #gviz = dfg_vis_factory.apply(dfg, log=log, variant=variant)
    #dfg_vis_factory.view(gviz)
    return dfg

from pm4py.algo.conformance.tokenreplay import factory as token_replay
from pm4py.evaluation.replay_fitness import factory as replay_fitness_factory


def replay(log, net, initial_marking, final_marking):
    replay_result = token_replay.apply(log, net, initial_marking, final_marking)
    log_fitness = replay_fitness_factory.evaluate(replay_result, variant="token_replay")
    return log_fitness

def replay2(log, net, initial_marking, final_marking):
    replay_result = token_replay.apply(log, net, initial_marking, final_marking)
    acc=0
    for x in replay_result:
        if x['trace_is_fit']:
            acc+=1

    return acc/len(replay_result)